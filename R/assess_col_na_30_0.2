col_na <- function(x3p, perc_of_col = 30, threshold_prop = 0.2){
  stopifnot(class(x3p) == 'x3p')
  dims <- dim(x3p$surface.matrix)
  # df <- x3p_to_df(x3p)
  # ncols <- length(unique(df$x))
  # col_i <- unique(df$x)
  # col_na_sum <- rep(0, length(col_i))
  # for(i in 1:length(col_i)){
  #   col_na_sum[i] <- sum(is.na(df$value[df$x == col_i[i]]))
  # }
  # col_na_perc <- col_na_sum / length(unique(df$y)) * 100 # HH: col_na_perc is identical to extract_na_column
  col_na_perc <- extract_na_column(x3p)
  bad_cols <- sum(col_na_perc > perc_of_col)
  threshold <- dims[1] * threshold_prop
  
  #  return(bad_cols < threshold)
  return(bad_cols / threshold)
}
